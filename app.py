import streamlit as st
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQA
import os
import json
import re
import fitz  # PyMuPDF
from datetime import datetime

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

# Configura√ß√£o da chave da OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Configura√ß√£o do modelo com verbose
llm = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0,
    openai_api_key=OPENAI_API_KEY,
    verbose=True
)

def extract_text_from_pdf(file):
    st.info("Processando o PDF...", icon="üìÑ")
    try:
        # Salvar o arquivo temporariamente
        with open("temp.pdf", "wb") as f:
            f.write(file.getbuffer())
        
        # Abrir o PDF com PyMuPDF
        doc = fitz.open("temp.pdf")
        
        # Extrair texto de todas as p√°ginas
        full_text = ""
        for page in doc:
            # Tentar extrair texto de diferentes maneiras
            page_text = page.get_text("text")
            
            # Se o texto estiver vazio, tentar extra√ß√£o de texto de blocos
            if not page_text.strip():
                page_text = page.get_text("blocks")
            
            full_text += page_text + "\n\n"
        
        # Fechar o documento
        doc.close()
        
        # Verificar se o texto extra√≠do n√£o est√° vazio
        if not full_text.strip():
            st.error("N√£o foi poss√≠vel extrair texto do PDF. O arquivo pode estar em um formato n√£o suportado.")
            return ""
        
        return full_text
    
    except Exception as e:
        st.error(f"Erro ao processar o PDF: {e}")
        return ""
    finally:
        # Sempre tente remover o arquivo tempor√°rio
        try:
            os.remove("temp.pdf")
        except:
            pass

class ArticleAnalyzer:
    def __init__(self, text):
        self.text = text
        self.llm = llm

    def analyze_article(self):
        # Prompts para an√°lise do artigo seguindo crit√©rios acad√™micos
        prompts = [
            ("Metadados do Artigo", 
             "Extraia os metadados principais do artigo: t√≠tulo, autores, institui√ß√µes, data de publica√ß√£o e peri√≥dico."),
            
            ("Relev√¢ncia e Contribui√ß√£o", """
             Avalie os seguintes aspectos:
             1. Relev√¢ncia e atualidade do tema
             2. Contribui√ß√£o original para o conhecimento
             3. Potencial impacto na √°rea
             4. Aplicabilidade dos resultados
             """),
            
            ("Clareza e Estrutura", """
             Analise a qualidade da reda√ß√£o e estrutura:
             1. Clareza e objetividade da linguagem
             2. Coer√™ncia na estrutura do texto
             3. Organiza√ß√£o l√≥gica das se√ß√µes
             4. Qualidade dos elementos visuais (tabelas, figuras)
             """),
            
            ("Rigor Metodol√≥gico", """
             Avalie o rigor metodol√≥gico considerando:
             1. Detalhamento da metodologia
             2. Adequa√ß√£o dos m√©todos aos objetivos
             3. Possibilidade de replica√ß√£o
             4. T√©cnicas estat√≠sticas (se aplic√°vel)
             5. Controle de vari√°veis
             """),
            
            ("Coer√™ncia da Pesquisa", """
             Analise a coer√™ncia entre:
             1. Objetivos propostos
             2. Hip√≥teses formuladas
             3. Resultados obtidos
             4. Conclus√µes apresentadas
             5. Alinhamento com a pergunta de pesquisa
             """),
            
            ("Fundamenta√ß√£o Te√≥rica", """
             Avalie a revis√£o de literatura:
             1. Abrang√™ncia da revis√£o
             2. Atualidade das refer√™ncias
             3. Cr√≠tica da literatura existente
             4. Contextualiza√ß√£o do estudo
             5. Justificativa da pesquisa
             """),
            
            ("Qualidade das Refer√™ncias", """
             Analise as refer√™ncias quanto a:
             1. Credibilidade das fontes
             2. Atualidade das cita√ß√µes
             3. Pertin√™ncia ao tema
             4. Diversidade de fontes
             5. Adequa√ß√£o √†s normas acad√™micas
             """),
            
            ("Aspectos √âticos", """
             Verifique:
             1. Declara√ß√£o de conflitos de interesse
             2. Aprova√ß√£o √©tica (quando aplic√°vel)
             3. Transpar√™ncia nos dados
             4. Rigor nas cita√ß√µes
             5. Originalidade do trabalho
             """),
            
            ("Impacto e Aplica√ß√µes", """
             Avalie:
             1. Relev√¢ncia pr√°tica dos resultados
             2. Potencial de impacto acad√™mico
             3. Implica√ß√µes para pol√≠ticas p√∫blicas
             4. Contribui√ß√µes para a √°rea
             5. Sugest√µes para pesquisas futuras
             """),
            
            ("Avalia√ß√£o Final", """
             Forne√ßa uma avalia√ß√£o geral do artigo:
             1. Pontos fortes principais
             2. Limita√ß√µes identificadas
             3. Nota geral (0-10)
             4. Recomenda√ß√µes para melhoria
             5. Conclus√£o sobre a qualidade geral
             """)
        ]
        
        # Gerar relat√≥rio
        report = "AN√ÅLISE DETALHADA DO ARTIGO CIENT√çFICO\n"
        report += "=" * 40 + "\n\n"
        
        for section_title, prompt in prompts:
            try:
                response = self.llm.invoke(f"{prompt}\n\nTexto do artigo:\n{self.text[:5000]}")
                report += f"\n{section_title}\n{'-' * len(section_title)}\n{response.content}\n"
            except Exception as e:
                report += f"\n{section_title}\n{'-' * len(section_title)}\nErro na an√°lise: {str(e)}\n"
        
        return report

def create_report(analyzer):
    st.info("Iniciando an√°lise completa...", icon="üîç")
    
    # Gerar relat√≥rio de texto
    report_text = analyzer.analyze_article()
    
    # Exibir relat√≥rio
    st.text_area("Relat√≥rio de An√°lise", report_text, height=600)
    
    return report_text

# Interface no Streamlit
st.set_page_config(page_title="An√°lise de Artigos Cient√≠ficos", layout="wide")
st.title(" An√°lise Inteligente de Artigos Cient√≠ficos")
st.write("Fa√ßa upload de um artigo em PDF para obter uma an√°lise detalhada")

# Upload do PDF
uploaded_file = st.file_uploader("Envie um artigo em PDF", type=["pdf"])

if uploaded_file:
    # Extrair texto
    extracted_text = extract_text_from_pdf(uploaded_file)
    
    # Verifica√ß√£o adicional de texto
    if not extracted_text or len(extracted_text.strip()) < 50:
        st.error(" Falha na extra√ß√£o de texto do PDF")
        st.warning("""
        Poss√≠veis raz√µes:
        1. O PDF pode estar protegido contra c√≥pia
        2. O documento pode ser uma imagem digitalizada
        3. O arquivo pode estar corrompido
        
        Sugest√µes:
        - Verifique se o PDF √© leg√≠vel
        - Tente converter o PDF para texto
        - Use um PDF com texto selecion√°vel
        """)
    else:
        # Criar analisador
        analyzer = ArticleAnalyzer(extracted_text)
        
        # Gerar relat√≥rio
        report = create_report(analyzer)
        
        # Bot√£o para download
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_name = f"relatorio_artigo_{timestamp}.txt"
        st.download_button(
            " Baixar Relat√≥rio Completo",
            data=report,
            file_name=report_name,
            mime="text/plain"
        )